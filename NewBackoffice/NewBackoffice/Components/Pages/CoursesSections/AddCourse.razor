@page "/courses/add-course"
@using NewBackoffice.Data.GraphQL
@using System.Text.Json
@inject HttpClient HttpClient
@rendermode InteractiveServer

<PageTitle>Add a course</PageTitle>

<h3>Add Course</h3>


<EditForm Model="@courseCreateRequest" OnValidSubmit="SubmitForm" FormName="addCourseForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="input-group">
        <label for="title">Title: </label>
        <InputText id="title" @bind-Value="courseCreateRequest.Title" />
    </div>

    <div class="input-group">
        <label for="ingress">Ingress: </label>
        <InputTextArea id="ingress" @bind-Value="courseCreateRequest.Ingress" />
    </div>

    <div class="input-group">
        <label for="imageUri">Image URI: </label>
        <InputText id="imageUri" @bind-Value="courseCreateRequest.ImageUri" />
    </div>

    <div class="input-group">
        <label for="imageHeaderUri">Image Header URI: </label>
        <InputText id="imageHeaderUri" @bind-Value="courseCreateRequest.ImageHeaderUri" />
    </div>

    <div class="input-group checkbox-group">
        <label for="isBestseller">Is a bestseller: </label>
        <InputCheckbox id="isBestseller" @bind-Value="courseCreateRequest.IsBestseller" />
    </div>

    <div class="input-group checkbox-group">
        <label for="isDigital">Is digital: </label>
        <InputCheckbox id="isDigital" @bind-Value="courseCreateRequest.IsDigital" />
    </div>


    <div class="input-group">
        <label for="categories">Categories (separate categories with ","): </label>
        <InputTextArea id="categories" @bind-Value="categoriesString" />
    </div>

    <div class="input-group">
        <label for="starRating">Star Rating: </label>
        <InputNumber id="starRating" @bind-Value="courseCreateRequest.StarRating" />
    </div>

    <div class="input-group">
        <label for="reviews">Reviews: </label>
        <InputTextArea id="reviews" @bind-Value="courseCreateRequest.Reviews" />
    </div>

    <div class="input-group">
        <label for="likes">Likes: </label>
        <InputText id="likes" @bind-Value="courseCreateRequest.Likes" />
    </div>

    <div class="input-group">
        <label for="likesInPercent">Likes in Percent: </label>
        <InputText id="likesInPercent" @bind-Value="courseCreateRequest.LikesInPercent" />
    </div>

    <div class="input-group">
        <label for="hours">Hours: </label>
        <InputText id="hours" @bind-Value="courseCreateRequest.Hours" />
    </div>

    <div class="input-group">
        <label for="name">Author/s (separate authors with ","): </label>
        <InputTextArea id="name" @bind-Value="authorsString" />
    </div>
    <div class="input-group">
        <label for="authorImages">Author Images: </label>
        <InputTextArea id="authorImages" @bind-Value="authorImagesString" />
    </div>

    <h4>Prices</h4>
    <div class="input-group">
        <label for="currency">Currency: </label>
        <InputText id="currency" @bind-Value="courseCreateRequest.Prices.Currency" />
    </div>

    <div class="input-group">
        <label for="price">Price: </label>
        <InputNumber id="price" @bind-Value="courseCreateRequest.Prices.Price" />
    </div>

    <div class="input-group">
        <label for="discount">Discount: </label>
        <InputNumber id="discount" @bind-Value="courseCreateRequest.Prices.Discount" />
    </div>

    <h4>Content</h4>
    <div class="input-group">
        <label for="description">Description: </label>
        <InputTextArea id="description" @bind-Value="courseCreateRequest.Content.Description" />
    </div>

    <div class="input-group">
        <label for="includes">Includes: </label>
        <InputText id="includes" @bind-Value="courseCreateRequest.Content.Includes" />
    </div>



   @foreach (var detail in courseCreateRequest.Content.ProgramDetails)
    {
        <div class="input-group">
            <label for="programDetailTitle">Program Detail Title: </label>
            <InputText @bind-Value="detail.Title" />
        </div>

        <div class="input-group">
            <label for="programDetailDescription">Program Detail Description: </label>
            <InputTextArea @bind-Value="detail.Description" />
        </div>
    } 

    <button type="submit" class="btn btn-theme">Add Course</button>
</EditForm>


@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger">@ErrorMessage</p>
}

@code {
    private CourseCreateRequest courseCreateRequest = new CourseCreateRequest();
    private string? ErrorMessage { get; set; }
    private string categoriesString = "";
    private string authorsString = "";
    private string authorImagesString = "";




    private async Task SubmitForm()
    {

        courseCreateRequest.Categories = categoriesString.Split(',').Select(s => s.Trim()).ToList();
        courseCreateRequest.Authors = authorsString.Split(',').Select(s => new CourseCreateRequest.AuthorCreateRequest { Name = s.Trim() }).ToList();
        var authorNames = authorsString.Split(',').Select(s => s.Trim()).ToList();
        var authorImages = authorImagesString.Split(',').Select(s => s.Trim()).ToList();
        courseCreateRequest.Authors = authorNames.Zip(authorImages, (name, image) => new CourseCreateRequest.AuthorCreateRequest { Name = name, AuthorImage = image }).ToList();

        var mutation = new GraphQLQuery
            {
                Query = @"
            mutation CreateCourse($input: CourseCreateRequestInput!) {
                createCourse(input: $input) {
                    imageUri
                    imageHeaderUri
                    isBestseller
                    isDigital
                    categories
                    title
                    ingress
                    starRating
                    reviews
                    likes
                    likesInPercent
                    hours
                    authors {
                        name
                        authorImage
                    }
                    prices {
                        currency
                        price
                        discount
                    }
                    content {
                        description
                        includes
                        programDetails {
                            id
                            title
                            description
                        }
                    }
                }
            }",
                Variables = new { input = courseCreateRequest }
            };
        Console.WriteLine("Sending mutation: " + mutation.Query);
        Console.WriteLine("Variables: " + JsonSerializer.Serialize(mutation.Variables));

       
        var response = await HttpClient.PostAsJsonAsync("https://courseprovider-silicon-jsb.azurewebsites.net/api/graphql?code=bgc2kUlGZk1Gvgj-j-Vsqb-KCjENeXD6H2b9-_4o5WkAAzFuW9ySgA%3D%3D", mutation);
        var responseContent = await response.Content.ReadAsStringAsync();
        Console.WriteLine("Response status code: " + response.StatusCode);
        Console.WriteLine("Response content: " + responseContent);

        if (response.IsSuccessStatusCode)
        {
            
            courseCreateRequest = new CourseCreateRequest();
            ErrorMessage = null;
        }
        else
        {
            ErrorMessage = "Failed to add course. Please try again later.";
        }
    }

    public class CourseCreateRequest
    {
        public string? ImageUri { get; set; }
        public string? ImageHeaderUri { get; set; }
        public bool IsBestseller { get; set; }
        public bool IsDigital { get; set; }
        public List<string>? Categories { get; set; } 
        public string? Title { get; set; }
        public string? Ingress { get; set; }
        public decimal StarRating { get; set; }
        public string? Reviews { get; set; }
        public string? Likes { get; set; }
        public string? LikesInPercent { get; set; } 
        public string? Hours { get; set; }

        public virtual PricesCreateRequest Prices { get; set; } = new PricesCreateRequest();
        public virtual ContentCreateRequest Content { get; set; } = new ContentCreateRequest();
        public virtual List<AuthorCreateRequest> Authors { get; set; } = new List<AuthorCreateRequest>();

        public class PricesCreateRequest
        {
            public string? Currency { get; set; }
            public decimal Price { get; set; }
            public decimal Discount { get; set; }
        }

        public class ContentCreateRequest
        {
            public string? Description { get; set; }
            public string? Includes { get; set; }
            public virtual List<ProgramDetailItemCreateRequest> ProgramDetails { get; set; } = new List<ProgramDetailItemCreateRequest>();
        }

        public class ProgramDetailItemCreateRequest
        {
            public string? Title { get; set; }
            public string? Description { get; set; }
        }

        public class AuthorCreateRequest
        {
            public string? Name { get; set; }
            public string? AuthorImage { get; set; }
        }
    }

    
}
