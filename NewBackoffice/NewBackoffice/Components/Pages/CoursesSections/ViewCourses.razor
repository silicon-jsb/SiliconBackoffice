@page "/courses/view-courses"
@rendermode InteractiveServer
@using NewBackoffice.Data.GraphQL
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@attribute [StreamRendering]


<PageTitle>All courses</PageTitle>

<h3>All courses</h3>


@if (courses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>BestSeller</th>
                <th>Digital</th>
                <th>Categories</th>
                <th>Ingress</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var course in courses)
            {
                <tr>
                    <td>@course.Id</td>
                    <td>@course.Title</td>
                    <td>@course.IsBestseller</td>
                    <td>@course.IsDigital</td>
                    <td>@course.Categories</td>
                    <td>@course.Ingress</td>
                    <td>                        
                        <button class="btn btn-theme" @onclick="() => NavigateToUpdateCourse(course.Id)">Update</button>
                        <button class="btn btn-danger" @onclick="() => DeleteCourse(course.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger">@ErrorMessage</p>
}

@code {
    
   
    private List<Course>? courses;

    private string? ErrorMessage { get; set; }

   
    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }
    public async Task LoadCourses()
    {
        var query = new GraphQLQuery
            {
                Query = @"
        {
            getCourses {
                id
                imageUri
                imageHeaderUri
                isBestseller
                isDigital
                categories
                title
                ingress
                starRating
                reviews
                likes
                likesInPercent
                hours
                authors {
                    name
                    authorImage
                }
                prices {
                    currency
                    price
                    discount
                }
                content {
                    description
                    includes
                    programDetails {
                        id
                        title
                        description
                    }
                }
            }
        }"
            };

        var response = await HttpClient.PostAsJsonAsync("https://courseprovider-silicon-jsb.azurewebsites.net/api/graphql?code=bgc2kUlGZk1Gvgj-j-Vsqb-KCjENeXD6H2b9-_4o5WkAAzFuW9ySgA%3D%3D", query);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<CourseResponse>();
            courses = result?.Data.GetCourses;
        
          
        }
        else
        {
            ErrorMessage = "Failed to fetch courses. Please try again later.";
        }
    }
   

    public class CourseResponse
    {
        public Data Data { get; set; }
    }

    public class Data
    {
        public List<Course> GetCourses { get; set; }
    }
    public class DeleteCourseResponse
    {
        public DeleteCourseData Data { get; set; }
    }

    public class DeleteCourseData
    {
        public bool DeleteCourse { get; set; }
    }
  


    public async Task DeleteCourse(string courseId)
    {
        var mutation = new GraphQLQuery
            {
                Query = @"
            mutation DeleteCourse($id: String!) {
                deleteCourse(id: $id)
            }",
                Variables = new { id = courseId }
            };

        var response = await HttpClient.PostAsJsonAsync("https://courseprovider-silicon-jsb.azurewebsites.net/api/graphql?code=bgc2kUlGZk1Gvgj-j-Vsqb-KCjENeXD6H2b9-_4o5WkAAzFuW9ySgA%3D%3D", mutation);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DeleteCourseResponse>();
            if (result?.Data.DeleteCourse == true)
            {
                courses = courses.Where(course => course.Id != courseId).ToList();
            }
            else
            {
                ErrorMessage = "Failed to delete course. Please try again later.";
            }
        }
        else
        {
            ErrorMessage = "Failed to delete course. Please try again later.";
        }
    }
    public void NavigateToUpdateCourse(string courseId)
    {
        NavigationManager.NavigateTo($"/courses/update-course/{courseId}");
    }


   

    public class Course
    {
        public string Id { get; set; } = null!;
        public string? ImageUri { get; set; }
        public string? ImageHeaderUri { get; set; }
        public bool IsBestseller { get; set; }
        public bool IsDigital { get; set; }
        public string[]? Categories { get; set; }
        public string? Title { get; set; }
        public string? Ingress { get; set; }
        public decimal StarRating { get; set; }
        public string? Reviews { get; set; }
        public string? Likes { get; set; }
        public string? LikesInPercent { get; set; }
        public string? Hours { get; set; }

        public virtual List<Author>? Authors { get; set; }
        public virtual Prices? Prices { get; set; }
        public virtual Content? Content { get; set; }
    }
    public class Content
    {
        public string? Description { get; set; }
        public string[]? Includes { get; set; }
        public virtual List<ProgramDetailItem>? ProgramDetails { get; set; }

    }

    public class Author
    {
        public string? Name { get; set; }
        public string? AuthorImage { get; set; }
    }

    public class Prices
    {
        public string? Currency { get; set; }
        public decimal Price { get; set; }
        public decimal Discount { get; set; }

    }
    public class ProgramDetailItem
    {
        public int Id { get; set; }
        public string? Title { get; set; }
        public string? Description { get; set; }
    }
}

   




   
        



    





