@using System.Net.Http
@inject IConfiguration Configuration

@page "/orders"
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Orders</PageTitle>

<h1>Orders</h1>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    //maybe not all of these but thats for design
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>UserId</th>
                <th>First name</th>
                <th>Last name</th>
                <th>Course ID</th>
                <th>Course</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.Id</td>
                    <td>@order.UserId</td>
                    <td>@order.FirstName</td>
                    <td>@order.LastName</td>
                    <td>@order.CourseId</td>
                    <td>@order.CourseTitle</td>
                    <td><button class="btn btn-danger" @onclick="() => ConfirmAndDeleteOrder(order.Id.ToString())">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger">@ErrorMessage</p>
}

@code {
    [Inject]
    private HttpClient? HttpClient { get; set; }

    private string? ErrorMessage { get; set; }

    private Order[]? orders;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    public async Task LoadOrders()
    {
        try
        {
            var functionKey = Configuration["AzureFunctionKeyOrders"];
            var response = await HttpClient.GetAsync($"https://orderprovider-newsilicon-jsb.azurewebsites.net/api/orders/?code={functionKey}");
            if (response.IsSuccessStatusCode)
            {
                orders = await response.Content.ReadFromJsonAsync<Order[]>();
            }
            else
            {
                ErrorMessage = "Failed to fetch saved courses. Please try again later.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred while fetching saved courses. " + ex.Message;
        }
    }



    public async Task DeleteOrder(string orderId)
    {
        try
        {
            var functionKey = Configuration["AzureFunctionKeyDeleteOrder"];
            var response = await HttpClient!.DeleteAsync($"https://orderprovider-newsilicon-jsb.azurewebsites.net/api/orders/{orderId}?code={functionKey}");

            if (response.IsSuccessStatusCode)
            {
                await LoadOrders();
            }
            else
            {
                ErrorMessage = "Failed to delete order. Please try again later.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred while deleting the order. " + ex.Message;
        }
    }


    public async Task ConfirmAndDeleteOrder(string orderId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to delete this order {orderId}?" }))
        {
            await DeleteOrder(orderId);
        }
    }

    private class Order
    {
        public int Id { get; set; }
        public string FirstName { get; set; } = null!;
        public string LastName { get; set; } = null!;
        public string UserId { get; set; } = null!;
        public int CourseId { get; set; }
        public string CourseTitle { get; set; } = null!;
    }
}
